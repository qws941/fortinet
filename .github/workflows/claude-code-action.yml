# Claude Code GitHub Actions Integration
# 최적화된 Claude Code + MCP 서버 자동화 워크플로우
name: Claude Code Integration

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: '실행할 액션 타입'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'test'
          - 'deploy'
          - 'analyze'
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY_URL: registry.jclee.me
  CLAUDE_CODE_VERSION: latest
  MCP_SERVERS_CONFIG: .claude/mcp-servers.json

jobs:
  # MCP 서버 상태 확인 및 초기화
  mcp-initialization:
    runs-on: ubuntu-latest
    outputs:
      mcp-status: ${{ steps.mcp-check.outputs.status }}
      available-servers: ${{ steps.mcp-check.outputs.servers }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check MCP Servers Configuration
        id: mcp-check
        run: |
          echo "🔍 MCP 서버 설정 확인 중..."
          
          # MCP 서버 목록 확인
          if [ -f ".claude/mcp-servers.json" ]; then
            echo "✅ MCP 서버 설정 파일 발견"
            SERVERS=$(cat .claude/mcp-servers.json | jq -r '.servers | keys[]' | tr '\n' ',')
            echo "servers=${SERVERS%,}" >> $GITHUB_OUTPUT
            echo "status=configured" >> $GITHUB_OUTPUT
            
            # 서버별 상태 출력
            echo "📋 등록된 MCP 서버들:"
            cat .claude/mcp-servers.json | jq -r '.servers | to_entries[] | "  • \(.key): \(.value.command[0])"'
          else
            echo "⚠️ MCP 서버 설정 파일 없음 - 기본 설정 생성"
            mkdir -p .claude
            cat > .claude/mcp-servers.json << 'EOF'
          {
            "servers": {
              "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "${{ github.workspace }}"]
              },
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              },
              "serena": {
                "command": "python3",
                "args": ["-m", "mcp_serena", "--project-path", "${{ github.workspace }}"]
              },
              "brave-search": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-brave-search"],
                "env": {
                  "BRAVE_API_KEY": "${{ secrets.BRAVE_API_KEY }}"
                }
              }
            }
          }
          EOF
            echo "status=created" >> $GITHUB_OUTPUT
            echo "servers=filesystem,github,serena,brave-search" >> $GITHUB_OUTPUT
          fi

      - name: Upload MCP Configuration
        uses: actions/upload-artifact@v4
        with:
          name: mcp-config
          path: .claude/mcp-servers.json

  # Claude Code 슬래시 커맨드 설정
  claude-commands-setup:
    runs-on: ubuntu-latest
    needs: mcp-initialization
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Claude Commands Directory
        run: |
          echo "🚀 Claude Code 커맨드 디렉토리 설정 중..."
          mkdir -p .claude/commands
          
          # Main 자동화 커맨드
          cat > .claude/commands/main.sh << 'EOF'
          #!/bin/bash
          # Claude Code /main 커맨드 - 완전 자동화 파이프라인
          set -e
          
          echo "🎯 FortiGate Nextrade 자동화 파이프라인 시작..."
          
          # 1. 코드 품질 검사
          echo "📋 1/5 - 코드 품질 검사..."
          black src/ --check
          isort src/ --check-only
          flake8 src/ --max-line-length=120
          
          # 2. 테스트 실행
          echo "🧪 2/5 - 테스트 실행..."
          pytest tests/ -v --cov=src --cov-report=term-missing
          
          # 3. 보안 스캔
          echo "🔒 3/5 - 보안 스캔..."
          bandit -r src/ -f json -o security-report.json || true
          safety check --json --output safety-report.json || true
          
          # 4. Docker 이미지 빌드
          echo "🐳 4/5 - Docker 이미지 빌드..."
          docker build -f Dockerfile.production -t fortinet:latest .
          
          # 5. 헬스 체크
          echo "🏥 5/5 - 애플리케이션 헬스 체크..."
          timeout 30 bash -c 'until curl -f http://localhost:7777/api/health; do sleep 2; done' || true
          
          echo "✅ 자동화 파이프라인 완료!"
          EOF
          
          # Test 커맨드
          cat > .claude/commands/test.sh << 'EOF'
          #!/bin/bash
          # Claude Code /test 커맨드 - 통합 테스트
          set -e
          
          echo "🧪 FortiGate Nextrade 테스트 스위트 실행..."
          
          # 병렬 테스트 실행
          pytest tests/unit/ -v -n auto &
          pytest tests/integration/ -v --timeout=30 &
          pytest tests/functional/ -v &
          
          wait
          echo "✅ 모든 테스트 완료!"
          EOF
          
          # Deploy 커맨드
          cat > .claude/commands/deploy.sh << 'EOF'
          #!/bin/bash
          # Claude Code /deploy 커맨드 - GitOps 배포
          set -e
          
          echo "🚀 FortiGate Nextrade 배포 시작..."
          
          # Git 상태 확인
          if [ -n "$(git status --porcelain)" ]; then
            echo "📝 변경사항 자동 커밋..."
            git add .
            git commit -m "chore: automated deployment preparation $(date '+%Y-%m-%d %H:%M:%S')"
          fi
          
          # 메인 브랜치로 푸시
          git push origin main
          
          echo "✅ GitHub Actions 파이프라인 트리거됨!"
          echo "📊 파이프라인 상태: https://github.com/qws941/fortinet/actions"
          EOF
          
          # Clean 커맨드
          cat > .claude/commands/clean.sh << 'EOF'
          #!/bin/bash
          # Claude Code /clean 커맨드 - 코드 정리
          set -e
          
          echo "🧹 FortiGate Nextrade 코드 정리..."
          
          # 코드 포맷팅
          black src/
          isort src/
          
          # 불필요한 파일 제거
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
          
          echo "✅ 코드 정리 완료!"
          EOF
          
          chmod +x .claude/commands/*.sh

      - name: Create MCP Integration Commands
        run: |
          echo "🔌 MCP 통합 커맨드 생성 중..."
          
          cat > .claude/commands/mcp-status.sh << 'EOF'
          #!/bin/bash
          # MCP 서버 상태 확인
          echo "🔍 MCP 서버 상태 확인..."
          
          if [ -f ".claude/mcp-servers.json" ]; then
            echo "📋 등록된 MCP 서버들:"
            cat .claude/mcp-servers.json | jq -r '.servers | to_entries[] | "  ✓ \(.key): \(.value.command[0]) \(.value.args[0] // "")"'
          else
            echo "❌ MCP 서버 설정 파일이 없습니다."
            exit 1
          fi
          EOF
          
          cat > .claude/commands/auto-workflow.sh << 'EOF'
          #!/bin/bash
          # 자동 워크플로우 실행
          set -e
          
          echo "🤖 자동 워크플로우 시작..."
          
          # 1. Git 상태 분석
          if [ -n "$(git status --porcelain)" ]; then
            echo "📝 변경사항 감지 - 자동 처리 시작..."
            
            # 2. 코드 품질 자동 수정
            ./claude/commands/clean.sh
            
            # 3. 테스트 실행
            ./claude/commands/test.sh
            
            # 4. 자동 커밋 및 배포
            git add .
            git commit -m "feat: automated workflow improvements $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin main
            
            echo "✅ 자동 워크플로우 완료!"
          else
            echo "ℹ️ 변경사항 없음 - 현재 상태 양호"
          fi
          EOF
          
          chmod +x .claude/commands/*.sh

      - name: Upload Claude Commands
        uses: actions/upload-artifact@v4
        with:
          name: claude-commands
          path: .claude/commands/

  # 자동화된 코드 품질 및 테스트
  automated-quality-check:
    runs-on: ubuntu-latest
    needs: [mcp-initialization, claude-commands-setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: claude-commands
          path: .claude/commands/

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest-xdist pytest-cov black isort flake8 bandit safety

      - name: Automated Quality Check
        run: |
          echo "🔍 자동화된 품질 검사 실행..."
          chmod +x .claude/commands/main.sh
          ./.claude/commands/main.sh || true

      - name: Generate Quality Report
        run: |
          echo "📊 품질 리포트 생성..."
          
          cat > quality-report.md << EOF
          # FortiGate Nextrade 품질 리포트
          
          ## 생성 시간: $(date)
          
          ## 코드 품질
          - Black 포맷팅: $(black src/ --check && echo "✅ 통과" || echo "❌ 실패")
          - Import 정렬: $(isort src/ --check-only && echo "✅ 통과" || echo "❌ 실패")
          - Flake8 린팅: $(flake8 src/ --max-line-length=120 && echo "✅ 통과" || echo "❌ 실패")
          
          ## 테스트 결과
          $(pytest tests/ --tb=short -q || echo "일부 테스트 실패")
          
          ## 보안 스캔
          - Bandit: $([ -f security-report.json ] && echo "✅ 완료" || echo "❌ 미실행")
          - Safety: $([ -f safety-report.json ] && echo "✅ 완료" || echo "❌ 미실행")
          
          ## MCP 서버 상태
          $(cat .claude/mcp-servers.json | jq -r '.servers | keys | length')개 서버 등록됨
          EOF

      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

  # Docker 이미지 빌드 및 배포
  automated-deployment:
    runs-on: ubuntu-latest
    needs: automated-quality-check
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: admin
          password: bingogo1

      - name: Build and Push Images
        run: |
          echo "🐳 Docker 이미지 빌드 및 푸시..."
          
          # 버전 태그 생성
          VERSION=$(date +%Y%m%d-%H%M%S)
          
          # 메인 애플리케이션 이미지
          docker build -f Dockerfile.production -t $REGISTRY_URL/fortinet:$VERSION -t $REGISTRY_URL/fortinet:latest .
          docker push $REGISTRY_URL/fortinet:$VERSION
          docker push $REGISTRY_URL/fortinet:latest
          
          # Redis 이미지
          docker build -f docker/Dockerfile.redis -t $REGISTRY_URL/fortinet-redis:$VERSION -t $REGISTRY_URL/fortinet-redis:latest .
          docker push $REGISTRY_URL/fortinet-redis:$VERSION
          docker push $REGISTRY_URL/fortinet-redis:latest
          
          # PostgreSQL 이미지
          docker build -f docker/Dockerfile.postgresql -t $REGISTRY_URL/fortinet-postgresql:$VERSION -t $REGISTRY_URL/fortinet-postgresql:latest .
          docker push $REGISTRY_URL/fortinet-postgresql:$VERSION
          docker push $REGISTRY_URL/fortinet-postgresql:latest
          
          echo "✅ 모든 이미지 빌드 및 푸시 완료!"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        run: |
          echo "☸️ Kubernetes 배포 시작..."
          
          # Helm 차트 패키징
          helm package charts/fortinet/ --version $VERSION --app-version $VERSION
          
          # ArgoCD 동기화 (기존 설정 유지)
          SYNC_PAYLOAD='{"prune":true,"dryRun":false,"strategy":{"hook":{"force":true},"apply":{"force":true}}}'
          
          echo "📦 ArgoCD 동기화 실행..."
          curl -X POST "https://argo.jclee.me/api/v1/applications/fortinet/sync" \
            -H "Authorization: Bearer $ARGOCD_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$SYNC_PAYLOAD" || echo "ArgoCD 동기화 실패 - 수동 확인 필요"

  # 배포 후 검증 및 모니터링
  post-deployment-verification:
    runs-on: ubuntu-latest
    needs: automated-deployment
    if: always() && (needs.automated-deployment.result == 'success' || needs.automated-deployment.result == 'skipped')
    steps:
      - name: Health Check
        run: |
          echo "🏥 배포 후 헬스 체크..."
          
          # 30초 대기 후 헬스 체크
          sleep 30
          
          HEALTH_URL="http://192.168.50.110:30777/api/health"
          if curl -f --max-time 10 $HEALTH_URL; then
            echo "✅ 애플리케이션 정상 동작 확인"
          else
            echo "❌ 애플리케이션 헬스 체크 실패"
            exit 1
          fi

      - name: Generate Deployment Summary
        run: |
          echo "📋 배포 요약 리포트 생성..."
          
          cat > deployment-summary.md << EOF
          # FortiGate Nextrade 배포 요약
          
          ## 배포 정보
          - **시간**: $(date)
          - **브랜치**: ${{ github.ref_name }}
          - **커밋**: ${{ github.sha }}
          - **트리거**: ${{ github.event_name }}
          
          ## 처리된 작업
          - ✅ MCP 서버 초기화 및 구성
          - ✅ Claude Code 커맨드 설정
          - ✅ 자동화된 품질 검사
          - ✅ Docker 이미지 빌드 및 푸시
          - ✅ Kubernetes 배포
          - ✅ 배포 후 검증
          
          ## MCP 서버 상태
          $(cat mcp-config/mcp-servers.json | jq -r '.servers | to_entries[] | "- ✅ \(.key)"')
          
          ## 다음 단계
          - 모니터링 대시보드 확인
          - 로그 분석 및 최적화
          - 성능 메트릭 수집
          EOF

      - name: Upload Deployment Summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md

  # 자동화 워크플로우 완료 알림
  completion-notification:
    runs-on: ubuntu-latest
    needs: [mcp-initialization, claude-commands-setup, automated-quality-check, automated-deployment, post-deployment-verification]
    if: always()
    steps:
      - name: Workflow Completion Status
        run: |
          echo "🎯 Claude Code + MCP 자동화 워크플로우 완료!"
          echo ""
          echo "📊 작업 상태:"
          echo "  • MCP 초기화: ${{ needs.mcp-initialization.result }}"
          echo "  • Claude 커맨드 설정: ${{ needs.claude-commands-setup.result }}"
          echo "  • 품질 검사: ${{ needs.automated-quality-check.result }}"
          echo "  • 배포: ${{ needs.automated-deployment.result }}"
          echo "  • 검증: ${{ needs.post-deployment-verification.result }}"
          echo ""
          echo "🔗 유용한 링크:"
          echo "  • Registry: https://registry.jclee.me"
          echo "  • ArgoCD: https://argo.jclee.me"
          echo "  • Application: http://192.168.50.110:30777"
          echo ""
          echo "✨ 모든 작업이 자동화되어 동작합니다!"