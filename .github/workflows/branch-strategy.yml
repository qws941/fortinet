name: Advanced Branch Strategy CI/CD

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - master
      - develop
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================
  # 1. 코드 품질 및 보안 검사
  # ============================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install black isort flake8 mypy bandit safety pytest-cov
      
      - name: Code formatting check (Black)
        run: black --check src/ tests/ --line-length=120
      
      - name: Import sorting check (isort)
        run: isort --check-only src/ tests/ --profile black
      
      - name: Linting check (Flake8)
        run: flake8 src/ tests/ --max-line-length=120 --ignore=E203,W503
      
      - name: Type checking (MyPy)
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true
      
      - name: Security scan (Bandit)
        run: bandit -r src/ -f json -o security-report.json
        continue-on-error: true
      
      - name: Dependency security check (Safety)
        run: safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: |
            security-report.json
            safety-report.json

  # ============================================
  # 2. 단위 테스트 및 커버리지
  # ============================================
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.11']
        test-group: ['unit', 'functional']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist
      
      - name: Run ${{ matrix.test-group }} tests
        run: |
          if [ "${{ matrix.test-group }}" == "unit" ]; then
            pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
          else
            pytest tests/functional/ -v --cov=src --cov-report=xml --cov-append
          fi
        env:
          APP_MODE: test
          OFFLINE_MODE: true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-group }}
          name: codecov-${{ matrix.test-group }}

  # ============================================
  # 3. 통합 테스트 (MSA 포함)
  # ============================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-xdist
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --maxfail=5
          pytest tests/msa/ -v --maxfail=3
        env:
          APP_MODE: test
          OFFLINE_MODE: true
          REDIS_URL: redis://localhost:6379

  # ============================================
  # 4. Docker 이미지 빌드 및 보안 스캔
  # ============================================
  docker-build-scan:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: false
          tags: fortinet:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fortinet:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # 5. 성능 테스트
  # ============================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust
      
      - name: Run performance tests
        run: |
          # 애플리케이션 백그라운드 실행
          cd src && python main.py --web &
          sleep 10
          
          # Locust 성능 테스트 실행
          locust -f tests/performance/locustfile.py --headless -u 50 -r 10 -t 60s --host http://localhost:7777
        env:
          APP_MODE: test
          WEB_APP_PORT: 7777

  # ============================================
  # 6. 브랜치별 배포
  # ============================================
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > ~/.kube/config
      
      - name: Deploy to development
        run: |
          kubectl apply -f k8s/environments/development/ -n fortinet-dev
          kubectl rollout status deployment/fortinet-dev -n fortinet-dev --timeout=300s
      
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f http://dev-fortinet.jclee.me/api/health || exit 1
          echo "Development deployment successful!"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, docker-build-scan, performance-tests]
    if: startsWith(github.ref, 'refs/heads/release/')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
      
      - name: Deploy to staging
        run: |
          # Helm 차트를 사용한 배포
          helm upgrade --install fortinet-staging ./charts/fortinet \
            --namespace fortinet-staging \
            --set image.tag=${{ github.sha }} \
            --set environment=staging \
            --wait --timeout=5m
      
      - name: Run comprehensive tests
        run: |
          sleep 60
          curl -f http://staging-fortinet.jclee.me/api/health || exit 1
          pytest tests/e2e/ -v --base-url=http://staging-fortinet.jclee.me
          echo "Staging deployment and tests successful!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, docker-build-scan]
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'chore: Release')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create Release Tag
        id: tag
        run: |
          VERSION=$(cat VERSION)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"
      
      - name: Configure ArgoCD
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
          argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
      
      - name: Deploy via ArgoCD
        run: |
          argocd app sync fortinet-prod --prune
          argocd app wait fortinet-prod --timeout 600
      
      - name: Verify production deployment
        run: |
          sleep 60
          curl -f https://fortinet.jclee.me/api/health || exit 1
          curl -f https://fortinet.jclee.me/api/version | jq '.version' | grep -q "${{ steps.tag.outputs.version }}"
          echo "Production deployment verified!"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          release_name: Release ${{ steps.tag.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  # ============================================
  # 7. 핫픽스 배포
  # ============================================
  deploy-hotfix:
    name: Emergency Hotfix Deployment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: startsWith(github.ref, 'refs/heads/hotfix/') && github.event_name == 'push'
    environment: production-hotfix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract hotfix version
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/hotfix/}
          VERSION=${BRANCH_NAME#*-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Emergency deploy via ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app sync fortinet-prod --prune
          argocd app wait fortinet-prod --timeout 300
      
      - name: Verify hotfix deployment
        run: |
          sleep 30
          curl -f https://fortinet.jclee.me/api/health || exit 1
          echo "Hotfix deployment successful!"
      
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚨 HOTFIX DEPLOYED 🚨
            Version: ${{ steps.version.outputs.version }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # 8. 브랜치 정리 및 알림
  # ============================================
  branch-cleanup:
    name: Branch Cleanup & Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
      - name: Delete merged branch
        if: startsWith(github.head_ref, 'feature/') || startsWith(github.head_ref, 'hotfix/')
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update project board
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            console.log(`PR #${prNumber} merged and branch cleaned up`);
            
            // 프로젝트 보드 업데이트 로직 추가
            // GitHub Projects API v2 활용

  # ============================================
  # 9. 보안 및 컴플라이언스 체크
  # ============================================
  security-compliance:
    name: Security & Compliance
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: GDPR Compliance Check
        run: |
          ./scripts/compliance-check.sh
          echo "GDPR compliance verified"
      
      - name: License compliance
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses.json
      
      - name: Secrets scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ============================================
  # 10. 메트릭 및 모니터링
  # ============================================
  collect-metrics:
    name: Collect CI/CD Metrics
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Collect pipeline metrics
        run: |
          echo "Pipeline Duration: ${{ github.event.repository.updated_at }}"
          echo "Tests Status: ${{ needs.unit-tests.result }}"
          echo "Security Scan: ${{ needs.code-quality.result }}"
          echo "Deployment: ${{ needs.deploy-production.result || needs.deploy-development.result || needs.deploy-staging.result }}"
      
      - name: Send metrics to monitoring
        run: |
          curl -X POST ${{ secrets.METRICS_ENDPOINT }} \
            -H "Authorization: Bearer ${{ secrets.METRICS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "pipeline": "${{ github.workflow }}",
              "branch": "${{ github.ref }}",
              "commit": "${{ github.sha }}",
              "duration": "${{ github.event.repository.updated_at }}",
              "status": "${{ job.status }}"
            }'
        continue-on-error: true