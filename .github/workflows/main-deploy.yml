# =============================================================================
# FortiGate Nextrade - Main Deploy Pipeline
# Optimized self-hosted pipeline with registry.jclee.me and Watchtower deployment
# =============================================================================

name: Main Deploy Pipeline

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
  schedule:
    # Weekly security scan at 2 AM UTC Sunday
    - cron: '0 2 * * 0'

env:
  REGISTRY: registry.jclee.me
  CHARTMUSEUM_URL: https://charts.jclee.me
  APP_NAME: fortinet
  DEPLOYMENT_HOST: 192.168.50.110
  DEPLOYMENT_PORT: 30777
  PYTHON_VERSION: '3.11'
  # Caching strategy
  CACHE_VERSION: v3
  PIP_CACHE_DIR: ~/.cache/pip
  HELM_CACHE_DIR: ~/.cache/helm

jobs:
  # =============================================================================
  # Pre-flight Checks
  # =============================================================================
  preflight:
    name: "🔍 Pre-flight Security & Dependency Check"
    runs-on: [self-hosted, linux, x64]
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should-skip }}
      cache-key: ${{ steps.cache-key.outputs.key }}
      security-passed: ${{ steps.security-check.outputs.passed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Skip Duplicate Actions
      id: skip-check
      uses: fkirc/skip-duplicate-actions@v5
      with:
        concurrent_skipping: 'same_content_newer'
        skip_after_successful_duplicate: 'true'
        do_not_skip: '["workflow_dispatch", "schedule"]'

    - name: Generate cache key
      id: cache-key
      run: |
        CACHE_KEY="${{ env.CACHE_VERSION }}-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-$(sha256sum requirements.txt | sha256sum | cut -d' ' -f1)"
        echo "key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "Cache key: ${CACHE_KEY}"

    - name: Security dependency check
      id: security-check
      run: |
        if command -v safety &> /dev/null; then
          safety check --json --output security-report.json || true
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "Safety tool not available, proceeding with caution"
          echo "passed=true" >> $GITHUB_OUTPUT
        fi

  # =============================================================================
  # Test Matrix - Parallel Quality Assurance
  # =============================================================================
  test-matrix:
    name: "🧪 Test Matrix"
    runs-on: [self-hosted, linux, x64]
    needs: preflight
    if: needs.preflight.outputs.should-skip != 'true'
    
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, security, lint]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python with cache
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.PIP_CACHE_DIR }}
          ~/.local
        key: ${{ needs.preflight.outputs.cache-key }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: Run ${{ matrix.test-type }} tests
      id: test-run
      run: |
        echo "Running ${{ matrix.test-type }} tests..."
        TEST_SUCCESS=false
        
        case "${{ matrix.test-type }}" in
          "unit")
            if cd src && python -m pytest ../tests/unit/ -v --tb=short --maxfail=5; then
              TEST_SUCCESS=true
            fi
            ;;
          "integration")
            if cd src && python -m pytest ../tests/integration/ -v --tb=short --timeout=60 -m "not slow"; then
              TEST_SUCCESS=true
            fi
            ;;
          "security")
            # Security tests are informational, always succeed
            bandit -r src/ -f json -o bandit-report.json || true
            safety check --json --output safety-report.json || true
            TEST_SUCCESS=true
            ;;
          "lint")
            LINT_SUCCESS=true
            black --check src/ --diff || LINT_SUCCESS=false
            isort --check-only src/ --diff || LINT_SUCCESS=false
            flake8 src/ --max-line-length=120 --statistics || LINT_SUCCESS=false
            
            if [ "$LINT_SUCCESS" = true ]; then
              TEST_SUCCESS=true
            fi
            ;;
        esac
        
        if [ "$TEST_SUCCESS" = true ]; then
          mkdir -p test-results-${{ matrix.test-type }}
          touch test-results-${{ matrix.test-type }}/.success
          echo "✅ ${{ matrix.test-type }} tests passed"
        else
          echo "❌ ${{ matrix.test-type }} tests failed"
          exit 1
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-results-${{ matrix.test-type }}/
          bandit-report.json
          safety-report.json
        retention-days: 30

  # =============================================================================
  # Build Matrix - Multi-Service Build with Registry Push
  # =============================================================================
  build-and-push:
    name: "🔨 Build and Push: ${{ matrix.service }}"
    runs-on: [self-hosted, linux, x64]
    needs: [preflight, test-matrix]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    strategy:
      fail-fast: false
      matrix:
        service: [redis, postgresql, fortinet]
        include:
          - service: redis
            dockerfile: Dockerfile.redis
            image-name: fortinet-redis
            context: .
          - service: postgresql
            dockerfile: Dockerfile.postgresql
            image-name: fortinet-postgresql
            context: .
          - service: fortinet
            dockerfile: Dockerfile.all-in-one
            image-name: fortinet
            context: .
    
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.tag }}
      version: ${{ steps.generate-tag.outputs.version }}
      build-date: ${{ steps.generate-tag.outputs.build-date }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
        buildkitd-flags: --debug

    - name: Generate build metadata
      id: generate-tag
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        BUILD_NUMBER="${{ github.run_number }}"
        
        if [[ "${{ github.ref_name }}" == "master" ]] || [[ "${{ github.ref_name }}" == "main" ]]; then
          VERSION="v1.0.${BUILD_NUMBER}-${SHORT_SHA}"
          IMAGE_TAG="latest"
        else
          VERSION="v1.0.${BUILD_NUMBER}-${SHORT_SHA}-${{ github.ref_name }}"
          IMAGE_TAG="${{ github.ref_name }}-${SHORT_SHA}"
        fi
        
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "build-date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        
        echo "📦 Build Metadata for ${{ matrix.service }}:"
        echo "  Version: ${VERSION}"
        echo "  Image Tag: ${IMAGE_TAG}"
        echo "  Build Date: ${BUILD_DATE}"
        echo "  Git SHA: ${SHORT_SHA}"
        echo "  Build Number: ${BUILD_NUMBER}"

    - name: Login to Harbor Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.generate-tag.outputs.tag }}

    - name: Build and push ${{ matrix.service }} image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ./${{ matrix.dockerfile }}
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ steps.generate-tag.outputs.build-date }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.generate-tag.outputs.version }}
          BUILD_NUMBER=${{ steps.generate-tag.outputs.build-number }}
        cache-from: |
          type=gha,scope=buildx-${{ matrix.service }}
          type=registry,ref=${{ env.REGISTRY }}/${{ matrix.image-name }}:cache
        cache-to: |
          type=gha,mode=max,scope=buildx-${{ matrix.service }}
          type=registry,ref=${{ env.REGISTRY }}/${{ matrix.image-name }}:cache,mode=max

    - name: Container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ matrix.image-name }}:${{ steps.generate-tag.outputs.tag }}'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        category: 'container-security-${{ matrix.service }}'

  # =============================================================================
  # Watchtower Deployment Trigger
  # =============================================================================
  deploy-watchtower:
    name: "🚀 Watchtower Deployment"
    runs-on: [self-hosted, linux, x64]
    needs: [build-and-push]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}
    
    steps:
    - name: Trigger Watchtower update
      run: |
        echo "🔄 Triggering Watchtower deployment..."
        
        # Wait for images to be available in registry
        echo "⏳ Waiting for registry propagation (30 seconds)..."
        sleep 30
        
        echo "✅ Images pushed to registry.jclee.me"
        echo "📋 Watchtower will automatically poll and update containers"
        echo "Images available at:"
        echo "  - ${{ env.REGISTRY }}/fortinet-redis:latest"
        echo "  - ${{ env.REGISTRY }}/fortinet-postgresql:latest"
        echo "  - ${{ env.REGISTRY }}/fortinet:latest"

    - name: Wait for deployment stabilization
      run: |
        echo "⏳ Waiting for deployment stabilization (60 seconds)..."
        sleep 60

  # =============================================================================
  # GitOps Deployment (Helm + ArgoCD)
  # =============================================================================
  deploy-gitops:
    name: "⚙️ GitOps Deployment"
    runs-on: [self-hosted, linux, x64]
    needs: [build-and-push, deploy-watchtower]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Helm with caching
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Cache Helm dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.HELM_CACHE_DIR }}
        key: helm-${{ env.CACHE_VERSION }}-${{ hashFiles('charts/fortinet/Chart.yaml') }}
        restore-keys: |
          helm-${{ env.CACHE_VERSION }}-

    - name: Update Helm chart
      id: helm-update
      run: |
        CHART_VERSION="1.0.${{ github.run_number }}-${{ needs.build-and-push.outputs.image-tag }}"
        APP_VERSION="${{ needs.build-and-push.outputs.version }}"
        IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        BUILD_DATE="${{ needs.build-and-push.outputs.build-date }}"
        
        echo "📋 Helm chart update..."
        echo "  Chart Version: ${CHART_VERSION}"
        echo "  App Version: ${APP_VERSION}"
        echo "  Image Tag: ${IMAGE_TAG}"
        echo "  Build Date: ${BUILD_DATE}"
        
        # Update Chart.yaml
        sed -i "s/^version:.*/version: ${CHART_VERSION}/" charts/fortinet/Chart.yaml
        sed -i "s/^appVersion:.*/appVersion: \"${APP_VERSION}\"/" charts/fortinet/Chart.yaml
        
        # Update values.yaml
        sed -i "s|repository: .*|repository: ${{ env.REGISTRY }}/fortinet|" charts/fortinet/values.yaml
        sed -i "s|tag: .*|tag: \"${IMAGE_TAG}\"|" charts/fortinet/values.yaml
        
        # Enhanced environment configuration
        sed -i "s/SELF_CONTAINED: .*/SELF_CONTAINED: \"true\"/" charts/fortinet/values.yaml
        sed -i "s/OFFLINE_MODE: .*/OFFLINE_MODE: \"true\"/" charts/fortinet/values.yaml
        sed -i "s/BUILD_DATE: .*/BUILD_DATE: \"${BUILD_DATE}\"/" charts/fortinet/values.yaml
        sed -i "s/GIT_SHA: .*/GIT_SHA: \"${{ github.sha }}\"/" charts/fortinet/values.yaml
        sed -i "s/VERSION: .*/VERSION: \"${APP_VERSION}\"/" charts/fortinet/values.yaml
        
        # Validate Helm chart
        helm lint charts/fortinet
        
        echo "chart-version=${CHART_VERSION}" >> $GITHUB_OUTPUT

    - name: Package and upload Helm chart
      run: |
        CHART_VERSION="${{ steps.helm-update.outputs.chart-version }}"
        
        # Package chart
        helm dependency update charts/fortinet || true
        helm package charts/fortinet --destination ./
        
        # Upload to ChartMuseum with retry logic
        CHART_FILE=$(find . -name "fortinet-*.tgz" -type f | head -1)
        if [ -f "$CHART_FILE" ]; then
          echo "📤 Uploading chart: ${CHART_FILE}"
          
          for i in {1..3}; do
            if curl --fail -L --data-binary "@${CHART_FILE}" \
               -u "${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }}" \
               "${{ env.CHARTMUSEUM_URL }}/api/charts"; then
              echo "✅ Chart uploaded successfully on attempt $i"
              break
            else
              echo "⚠️ Chart upload attempt $i failed, retrying..."
              sleep 5
            fi
          done
        fi

    - name: GitOps commit
      run: |
        IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        BUILD_VERSION="${{ needs.build-and-push.outputs.version }}"
        BUILD_DATE="${{ needs.build-and-push.outputs.build-date }}"
        CHART_VERSION="${{ steps.helm-update.outputs.chart-version }}"
        
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        echo "🔄 Creating GitOps commit..."
        
        # Create commit message
        cat > commit_message.txt << EOF
deploy: update container to ${IMAGE_TAG}

🔧 Deployment Details:
- Images: registry.jclee.me/fortinet-redis:${IMAGE_TAG}
- Images: registry.jclee.me/fortinet-postgresql:${IMAGE_TAG}
- Images: registry.jclee.me/fortinet:${IMAGE_TAG}
- Version: ${BUILD_VERSION}
- Build Date: ${BUILD_DATE}
- Git SHA: ${{ github.sha }}
- Build Number: ${{ github.run_number }}

🎯 Changes:
- Updated Helm chart to v${CHART_VERSION}
- Multi-service deployment with Watchtower
- Enhanced registry.jclee.me integration

[skip ci]
EOF
        
        # Stage changes
        git add charts/fortinet/
        
        # Commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -F commit_message.txt
          git push origin ${{ github.ref_name }}
        fi

    - name: ArgoCD sync
      run: |
        echo "🔄 Triggering ArgoCD sync..."
        
        sleep 20
        
        SYNC_PAYLOAD=$(cat << 'JSON_EOF'
{
  "prune": true,
  "dryRun": false,
  "strategy": {
    "hook": {
      "force": true
    },
    "apply": {
      "force": true
    }
  },
  "syncOptions": [
    "CreateNamespace=true",
    "PrunePropagationPolicy=foreground",
    "Replace=true"
  ]
}
JSON_EOF
)
        
        for i in {1..3}; do
          echo "ArgoCD sync attempt $i/3..."
          
          if curl -X POST "http://${{ env.DEPLOYMENT_HOST }}:31017/api/v1/applications/${{ env.APP_NAME }}/sync" \
             -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
             -H "Content-Type: application/json" \
             -d "$SYNC_PAYLOAD" \
             --connect-timeout 15 --max-time 45; then
            echo "✅ ArgoCD sync triggered successfully"
            break
          else
            echo "⚠️ ArgoCD sync attempt $i failed, retrying..."
            sleep 10
          fi
        done

  # =============================================================================
  # Verification and Health Checks
  # =============================================================================
  verify:
    name: "✅ Deployment Verification"
    needs: [build-and-push, deploy-watchtower, deploy-gitops]
    runs-on: [self-hosted, linux, x64]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment stabilization
      run: |
        echo "⏳ Deployment stabilization monitoring..."
        
        # Monitor ArgoCD application sync status
        for i in {1..20}; do
          echo "Checking ArgoCD sync status (attempt $i/20)..."
          
          SYNC_STATUS=$(curl -s "http://${{ env.DEPLOYMENT_HOST }}:31017/api/v1/applications/${{ env.APP_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" | \
            jq -r '.status.sync.status // "Unknown"' 2>/dev/null || echo "Unknown")
          
          HEALTH_STATUS=$(curl -s "http://${{ env.DEPLOYMENT_HOST }}:31017/api/v1/applications/${{ env.APP_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" | \
            jq -r '.status.health.status // "Unknown"' 2>/dev/null || echo "Unknown")
          
          echo "  Sync Status: ${SYNC_STATUS}"
          echo "  Health Status: ${HEALTH_STATUS}"
          
          if [[ "${SYNC_STATUS}" == "Synced" && "${HEALTH_STATUS}" == "Healthy" ]]; then
            echo "✅ ArgoCD reports application is synced and healthy"
            break
          fi
          
          sleep 15
        done
        
        echo "⏳ Additional stabilization wait (60 seconds)..."
        sleep 60

    - name: Health verification
      id: health-check
      run: |
        echo "🏥 Application health verification..."
        
        HEALTH_ENDPOINTS=(
          "/api/health"
          "/api/status"
          "/"
        )
        
        FAILED_CHECKS=""
        TOTAL_CHECKS=0
        
        for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
          echo "🔍 Testing endpoint: ${endpoint}"
          TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
          
          for attempt in {1..8}; do
            echo "  Attempt ${attempt}/8 for ${endpoint}..."
            
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
              --connect-timeout 10 --max-time 20 \
              "http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}${endpoint}" || echo "000")
            
            if [[ "${HTTP_CODE}" =~ ^[23] ]]; then
              echo "  ✅ ${endpoint} responded with HTTP ${HTTP_CODE}"
              break
            elif [ ${attempt} -eq 8 ]; then
              echo "  ❌ ${endpoint} failed all attempts (final HTTP: ${HTTP_CODE})"
              FAILED_CHECKS="${FAILED_CHECKS} ${endpoint}"
            else
              echo "  ⚠️ ${endpoint} returned HTTP ${HTTP_CODE}, retrying..."
              sleep 10
            fi
          done
        done
        
        # Test response time
        RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" \
          "http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health" || echo "999")
        
        echo "📊 Health endpoint response time: ${RESPONSE_TIME}s"
        
        # Summary
        if [ -n "$FAILED_CHECKS" ]; then
          echo "❌ Failed endpoints:$FAILED_CHECKS"
          exit 1
        else
          echo "✅ All health checks passed (${TOTAL_CHECKS}/${TOTAL_CHECKS})"
          echo "health-status=healthy" >> $GITHUB_OUTPUT
        fi

    - name: Deployment summary
      run: |
        echo "🎉 MAIN DEPLOY PIPELINE SUCCESSFUL"
        echo "================================================================"
        echo "📦 Multi-Service FortiGate Nextrade Deployment"
        echo "🏷️  Redis: ${{ env.REGISTRY }}/fortinet-redis:${{ needs.build-and-push.outputs.image-tag }}"
        echo "🏷️  PostgreSQL: ${{ env.REGISTRY }}/fortinet-postgresql:${{ needs.build-and-push.outputs.image-tag }}"
        echo "🏷️  Fortinet: ${{ env.REGISTRY }}/fortinet:${{ needs.build-and-push.outputs.image-tag }}"
        echo "🔖 Version: ${{ needs.build-and-push.outputs.version }}"
        echo "📅 Built: ${{ needs.build-and-push.outputs.build-date }}"
        echo "🎯 Git Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "🔢 Build: ${{ github.run_number }}"
        echo ""
        echo "🌐 Access URLs:"
        echo "  • NodePort: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}"
        echo "  • Health: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health"
        echo "  • Status: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/status"
        echo ""
        echo "🚀 Deployment Methods:"
        echo "  • Watchtower: Auto-update triggered"
        echo "  • GitOps: ArgoCD sync completed"
        echo "  • Registry: All images pushed to registry.jclee.me"
        echo ""
        echo "================================================================"
        
        # Enhanced GitHub Step Summary
        echo "## 🎉 Main Deploy Pipeline Success" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Multi-Service Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Redis**: \`${{ env.REGISTRY }}/fortinet-redis:${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **PostgreSQL**: \`${{ env.REGISTRY }}/fortinet-postgresql:${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Fortinet**: \`${{ env.REGISTRY }}/fortinet:${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Built**: ${{ needs.build-and-push.outputs.build-date }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Deployment Features" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Multi-service container builds (Redis, PostgreSQL, Fortinet)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Registry.jclee.me integration with all images" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Watchtower auto-deployment trigger" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ GitOps deployment with ArgoCD sync" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Comprehensive health verification" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Enhanced security scanning with Trivy" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Access Points" >> $GITHUB_STEP_SUMMARY
        echo "- **NodePort**: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health" >> $GITHUB_STEP_SUMMARY
        echo "- **Status API**: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/status" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Notification and Cleanup
  # =============================================================================
  notify:
    name: "📢 Pipeline Completion"
    runs-on: [self-hosted, linux, x64]
    needs: [preflight, test-matrix, build-and-push, deploy-watchtower, deploy-gitops, verify]
    if: always()
    
    steps:
    - name: Pipeline completion notification
      run: |
        echo "📢 Main Deploy Pipeline execution completed"
        echo "Pipeline Status Summary:"
        echo "  Preflight: ${{ needs.preflight.result }}"
        echo "  Test Matrix: ${{ needs.test-matrix.result }}"
        echo "  Build and Push: ${{ needs.build-and-push.result }}"
        echo "  Deploy Watchtower: ${{ needs.deploy-watchtower.result }}"
        echo "  Deploy GitOps: ${{ needs.deploy-gitops.result }}"
        echo "  Verify: ${{ needs.verify.result }}"
        
        if [[ "${{ needs.verify.result }}" == "success" ]]; then
          echo "🎉 Complete deployment success!"
        else
          echo "⚠️ Pipeline completed with issues"
        fi

    - name: Cleanup artifacts
      run: |
        echo "🧹 Cleaning up build artifacts..."
        docker system prune -f --filter "until=12h" || true
        echo "✅ Cleanup completed"