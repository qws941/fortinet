#!/usr/bin/env python3
"""
Vulnerability Detector Module
Handles vulnerability detection and assessment
"""

import json
import logging
import os
import subprocess
from datetime import datetime
from typing import Dict, List

logger = logging.getLogger(__name__)


class VulnerabilityDetectorMixin:
    """Mixin for vulnerability detection functionality"""

    def scan_vulnerabilities(self) -> Dict:
        """취약점 스캔 실행"""
        try:
            logger.info("취약점 스캔 시작")

            vulnerabilities = []

            # 시스템 취약점 검사
            system_vulns = self._check_system_vulnerabilities()
            vulnerabilities.extend(system_vulns)

            # 설정 취약점 검사
            config_vulns = self._check_configuration_vulnerabilities()
            vulnerabilities.extend(config_vulns)

            # 패키지 취약점 검사
            package_vulns = self._check_package_vulnerabilities()
            vulnerabilities.extend(package_vulns)

            # 권한 취약점 검사
            permission_vulns = self._check_permission_vulnerabilities()
            vulnerabilities.extend(permission_vulns)

            risk_level = self._assess_vulnerability_risk(vulnerabilities)

            result = {
                "scan_type": "vulnerability_scan",
                "timestamp": datetime.now().isoformat(),
                "status": "completed",
                "vulnerabilities": vulnerabilities,
                "total_vulnerabilities": len(vulnerabilities),
                "risk_level": risk_level,
                "categories": self._categorize_vulnerabilities(vulnerabilities),
            }

            logger.info(f"취약점 스캔 완료: {len(vulnerabilities)}개 취약점 발견")
            return result

        except Exception as e:
            logger.error(f"취약점 스캔 오류: {e}")
            return {
                "scan_type": "vulnerability_scan",
                "timestamp": datetime.now().isoformat(),
                "status": "error",
                "error": str(e),
                "risk_level": "unknown",
            }

    def _check_system_vulnerabilities(self) -> List[Dict]:
        """시스템 취약점 검사"""
        vulnerabilities = []

        try:
            # 커널 버전 확인
            kernel_version = subprocess.check_output(["uname", "-r"], text=True).strip()
            if self._is_kernel_vulnerable(kernel_version):
                vulnerabilities.append(
                    {
                        "type": "system",
                        "category": "kernel",
                        "severity": "high",
                        "description": f"잠재적으로 취약한 커널 버전: {kernel_version}",
                        "recommendation": "최신 커널로 업데이트 권장",
                    }
                )

            # SSH 설정 확인
            ssh_vulns = self._check_ssh_configuration()
            vulnerabilities.extend(ssh_vulns)

        except Exception as e:
            logger.error(f"시스템 취약점 검사 오류: {e}")

        return vulnerabilities

    def _check_configuration_vulnerabilities(self) -> List[Dict]:
        """설정 취약점 검사"""
        vulnerabilities = []

        try:
            # 환경변수 파일 확인
            env_files = [".env", ".env.local", ".env.production"]
            for env_file in env_files:
                if os.path.exists(env_file):
                    # 파일 권한 확인
                    file_stat = os.stat(env_file)
                    if file_stat.st_mode & 0o077:  # 다른 사용자나 그룹에 읽기 권한이 있는 경우
                        vulnerabilities.append(
                            {
                                "type": "configuration",
                                "category": "file_permissions",
                                "severity": "medium",
                                "description": f"환경변수 파일 {env_file}의 권한이 너무 관대함",
                                "recommendation": f"chmod 600 {env_file} 실행 권장",
                                "file_path": env_file,
                            }
                        )

            # Docker 설정 확인 (Docker가 설치된 경우)
            if self._is_docker_installed():
                docker_vulns = self._check_docker_configuration()
                vulnerabilities.extend(docker_vulns)

        except Exception as e:
            logger.error(f"설정 취약점 검사 오류: {e}")

        return vulnerabilities

    def _check_package_vulnerabilities(self) -> List[Dict]:
        """패키지 취약점 검사"""
        vulnerabilities = []

        try:
            # Python 패키지 취약점 검사 (safety 사용)
            try:
                result = subprocess.run(
                    ["python", "-m", "safety", "check", "--json"],
                    capture_output=True,
                    text=True,
                    timeout=30,
                )

                if result.returncode == 0 and result.stdout:
                    safety_results = json.loads(result.stdout)
                    for vuln in safety_results:
                        vulnerabilities.append(
                            {
                                "type": "package",
                                "category": "python_package",
                                "severity": vuln.get("severity", "medium"),
                                "description": (
                                    f"취약한 Python 패키지: {vuln.get('package')} "
                                    f"v{vuln.get('installed_version')}"
                                ),
                                "recommendation": f"버전 {vuln.get('safe_version', 'latest')}로 업데이트",
                                "cve": vuln.get("vulnerability_id"),
                                "package": vuln.get("package"),
                            }
                        )

            except (
                subprocess.TimeoutExpired,
                subprocess.CalledProcessError,
                json.JSONDecodeError,
            ):
                logger.warning("Safety 패키지 검사 실패")

        except Exception as e:
            logger.error(f"패키지 취약점 검사 오류: {e}")

        return vulnerabilities

    def _check_permission_vulnerabilities(self) -> List[Dict]:
        """권한 취약점 검사"""
        vulnerabilities = []

        try:
            # 중요한 파일들의 권한 확인
            critical_files = getattr(self, "security_baselines", {}).get(
                "critical_files", []
            )

            for file_path in critical_files:
                if os.path.exists(file_path):
                    file_stat = os.stat(file_path)

                    # 너무 관대한 권한 확인
                    if file_stat.st_mode & 0o022:  # 그룹이나 다른 사용자에게 쓰기 권한
                        vulnerabilities.append(
                            {
                                "type": "permission",
                                "category": "file_permissions",
                                "severity": "high",
                                "description": f"중요 파일 {file_path}의 권한이 너무 관대함",
                                "recommendation": f"chmod 644 {file_path} 또는 더 제한적인 권한 설정",
                                "file_path": file_path,
                                "current_permissions": oct(file_stat.st_mode)[-3:],
                            }
                        )

        except Exception as e:
            logger.error(f"권한 취약점 검사 오류: {e}")

        return vulnerabilities

    def _check_ssh_configuration(self) -> List[Dict]:
        """SSH 설정 취약점 검사"""
        vulnerabilities = []

        try:
            ssh_config_path = "/etc/ssh/sshd_config"
            if os.path.exists(ssh_config_path):
                with open(ssh_config_path, "r") as f:
                    config = f.read()

                # 루트 로그인 허용 확인
                if "PermitRootLogin yes" in config:
                    vulnerabilities.append(
                        {
                            "type": "configuration",
                            "category": "ssh",
                            "severity": "high",
                            "description": "SSH 루트 로그인이 허용됨",
                            "recommendation": "PermitRootLogin no 설정 권장",
                        }
                    )

                # 패스워드 인증 확인
                if "PasswordAuthentication yes" in config:
                    vulnerabilities.append(
                        {
                            "type": "configuration",
                            "category": "ssh",
                            "severity": "medium",
                            "description": "SSH 패스워드 인증이 허용됨",
                            "recommendation": "SSH 키 인증만 사용하고 PasswordAuthentication no 설정 권장",
                        }
                    )

        except Exception as e:
            logger.error(f"SSH 설정 확인 오류: {e}")

        return vulnerabilities

    def _check_docker_configuration(self) -> List[Dict]:
        """Docker 설정 취약점 검사"""
        vulnerabilities = []

        try:
            # Docker 소켓 권한 확인
            docker_socket = "/var/run/docker.sock"
            if os.path.exists(docker_socket):
                file_stat = os.stat(docker_socket)
                if file_stat.st_mode & 0o066:  # 그룹이나 다른 사용자에게 읽기/쓰기 권한
                    vulnerabilities.append(
                        {
                            "type": "configuration",
                            "category": "docker",
                            "severity": "high",
                            "description": "Docker 소켓의 권한이 너무 관대함",
                            "recommendation": "Docker 소켓 권한을 660으로 제한하고 docker 그룹 사용자만 액세스 허용",
                        }
                    )

        except Exception as e:
            logger.error(f"Docker 설정 확인 오류: {e}")

        return vulnerabilities

    def _is_kernel_vulnerable(self, kernel_version: str) -> bool:
        """커널 버전 취약점 확인 (간단한 체크)"""
        # 실제 구현에서는 CVE 데이터베이스와 비교
        # 여기서는 간단한 예시
        try:
            version_parts = kernel_version.split(".")[:3]
            major, minor = int(version_parts[0]), int(version_parts[1])

            # 매우 오래된 버전 확인
            if major < 4:
                return True
            if major == 4 and minor < 4:
                return True

        except (ValueError, IndexError):
            pass

        return False

    def _is_docker_installed(self) -> bool:
        """Docker 설치 확인"""
        try:
            subprocess.run(["docker", "--version"], capture_output=True, timeout=5)
            return True
        except (
            subprocess.CalledProcessError,
            subprocess.TimeoutExpired,
            FileNotFoundError,
        ):
            return False

    def _assess_vulnerability_risk(self, vulnerabilities: List[Dict]) -> str:
        """취약점 위험도 평가"""
        if not vulnerabilities:
            return "low"

        severity_counts = {"critical": 0, "high": 0, "medium": 0, "low": 0}

        for vuln in vulnerabilities:
            severity = vuln.get("severity", "medium")
            severity_counts[severity] = severity_counts.get(severity, 0) + 1

        if severity_counts["critical"] > 0:
            return "critical"
        elif severity_counts["high"] > 2:
            return "high"
        elif severity_counts["high"] > 0 or severity_counts["medium"] > 5:
            return "medium"
        else:
            return "low"

    def _categorize_vulnerabilities(self, vulnerabilities: List[Dict]) -> Dict:
        """취약점 분류"""
        categories = {}

        for vuln in vulnerabilities:
            category = vuln.get("category", "unknown")
            if category not in categories:
                categories[category] = []
            categories[category].append(vuln)

        return categories
