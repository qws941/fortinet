# =============================================================================
# FortiGate Nextrade - Unified Docker Compose Configuration
# Supports all deployment modes through environment variables
# =============================================================================

version: '3.8'

services:
  # Kong Database (MSA mode only)
  kong-database:
    image: postgres:${KONG_POSTGRES_VERSION:-13-alpine}
    container_name: ${KONG_DB_CONTAINER_NAME:-kong-database}
    environment:
      POSTGRES_USER: ${KONG_DB_USER:-kong}
      POSTGRES_DB: ${KONG_DB_NAME:-kong}
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: ${KONG_DB_INIT_ARGS:---auth-host=scram-sha-256}
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  # Kong Migrations (MSA mode only)
  kong-migrations:
    image: kong:${KONG_VERSION:-latest}
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_DB_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PG_DATABASE: ${KONG_DB_NAME:-kong}
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    profiles:
      - msa
      - secure

  # Kong Gateway (MSA mode only)
  kong:
    image: kong:${KONG_VERSION:-latest}
    container_name: ${KONG_CONTAINER_NAME:-kong-gateway}
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_DB_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PG_DATABASE: ${KONG_DB_NAME:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN:-0.0.0.0:8001, 0.0.0.0:8444 ssl}
      KONG_HEADERS: ${KONG_HEADERS:-off}
      KONG_ANONYMOUS_REPORTS: ${KONG_ANONYMOUS_REPORTS:-off}
    ports:
      - "${KONG_PROXY_PORT:-8000}:8000"
      - "${KONG_ADMIN_PORT:-8001}:8001"
      - "${KONG_GUI_PORT:-8002}:8002"
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  # Consul Service Discovery (MSA mode only)
  consul:
    image: consul:${CONSUL_VERSION:-latest}
    container_name: ${CONSUL_CONTAINER_NAME:-consul}
    command: >
      agent -server -bootstrap -ui -node=server-1 -bind=0.0.0.0 -client=0.0.0.0
      -datacenter=${CONSUL_DATACENTER:-dc1}
      ${CONSUL_ENCRYPT_ENABLED:+-encrypt=${CONSUL_ENCRYPT_KEY}}
    ports:
      - "${CONSUL_PORT:-8500}:8500"
    environment:
      CONSUL_BIND_INTERFACE: eth0
    volumes:
      - consul-data:/consul/data
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  # RabbitMQ Message Queue (MSA mode only)
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION:-3-management-alpine}
    container_name: ${RABBITMQ_CONTAINER_NAME:-rabbitmq}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-fortinet}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-fortinet}
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: ${RABBITMQ_MEMORY_LIMIT:-0.6}
      RABBITMQ_DISK_FREE_LIMIT: ${RABBITMQ_DISK_LIMIT:-1GB}
    ports:
      - "${RABBITMQ_AMQP_PORT:-5672}:5672"
      - "${RABBITMQ_MGMT_PORT:-15672}:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  # Redis Cache Service
  redis:
    image: redis:${REDIS_VERSION:-7.2-alpine}
    container_name: ${REDIS_CONTAINER_NAME:-fortinet-redis}
    command: >
      redis-server
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
      --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      --save ${REDIS_SAVE_CONFIG:-900 1 300 10 60 10000}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - fortinet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - default
      - msa
      - secure
      - dev

  # MongoDB (Secure mode only)
  mongodb:
    image: mongo:${MONGODB_VERSION:-7.0}
    container_name: ${MONGODB_CONTAINER_NAME:-mongodb}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER:-security}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-security}
    volumes:
      - mongodb-data:/data/db
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - secure

  # Main FortiGate Application
  fortinet:
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile.production}
      args:
        BUILD_DATE: "${BUILD_DATE}"
        VCS_REF: "${VCS_REF}"
        VERSION: "${VERSION:-latest}"
    image: ${DOCKER_REGISTRY:-registry.jclee.me}/${DOCKER_IMAGE_NAME:-fortinet/fortinet}:${DOCKER_TAG:-latest}
    container_name: ${CONTAINER_NAME:-fortinet}
    hostname: ${HOSTNAME:-fortinet}
    depends_on:
      redis:
        condition: ${REDIS_DEPENDENCY_CONDITION:-service_healthy}
    ports:
      - "${WEB_APP_PORT:-7777}:${WEB_APP_PORT:-7777}"
      - "${WEBSOCKET_PORT:-8765}:${WEBSOCKET_PORT:-8765}"
      - "${METRICS_PORT:-9090}:${METRICS_PORT:-9090}"
    environment:
      # Application Configuration
      - APP_MODE=${APP_MODE:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WEB_APP_HOST=${WEB_APP_HOST:-0.0.0.0}
      - WEB_APP_PORT=${WEB_APP_PORT:-7777}
      - OFFLINE_MODE=${OFFLINE_MODE:-false}
      - STANDALONE_MODE=${STANDALONE_MODE:-false}
      - SELF_CONTAINED=${SELF_CONTAINED:-false}
      - NO_EXTERNAL_DEPS=${NO_EXTERNAL_DEPS:-false}
      
      # FortiGate Configuration
      - FORTIGATE_HOST=${FORTIGATE_HOST}
      - FORTIGATE_PORT=${FORTIGATE_PORT:-443}
      - FORTIGATE_API_TOKEN=${FORTIGATE_API_TOKEN}
      - FORTIGATE_VERIFY_SSL=${FORTIGATE_VERIFY_SSL:-false}
      
      # FortiManager Configuration
      - FORTIMANAGER_HOST=${FORTIMANAGER_HOST}
      - FORTIMANAGER_PORT=${FORTIMANAGER_PORT:-541}
      - FORTIMANAGER_USERNAME=${FORTIMANAGER_USERNAME}
      - FORTIMANAGER_PASSWORD=${FORTIMANAGER_PASSWORD}
      - FORTIMANAGER_API_KEY=${FORTIMANAGER_API_KEY}
      - FORTIMANAGER_VERIFY_SSL=${FORTIMANAGER_VERIFY_SSL:-false}
      - FORTIMANAGER_DEFAULT_ADOM=${FORTIMANAGER_DEFAULT_ADOM:-root}
      
      # Performance Configuration
      - WORKERS=${WORKERS:-4}
      - WORKER_CLASS=${WORKER_CLASS:-gevent}
      - WORKER_CONNECTIONS=${WORKER_CONNECTIONS:-1000}
      - MAX_REQUESTS=${MAX_REQUESTS:-1000}
      - TIMEOUT=${TIMEOUT:-120}
      
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://fortinet:fortinet123@localhost:5432/fortinet_db}
      
      # Redis Configuration
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_URL=${REDIS_URL:-redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/${REDIS_DB:-0}}
      
      # MSA Service URLs (MSA mode only)
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://${RABBITMQ_USER:-fortinet}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST:-}}
      - KONG_ADMIN_URL=${KONG_ADMIN_URL:-http://kong:8001}
      
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY:-change-this-secure-key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTER_SERVICE_AUTH_KEY=${INTER_SERVICE_AUTH_KEY}
      - INTERNAL_NETWORKS=${INTERNAL_NETWORKS:-192.168.0.0/16,172.16.0.0/12,10.0.0.0/8}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # ITSM Configuration
      - ITSM_BASE_URL=${ITSM_BASE_URL}
      - ITSM_API_KEY=${ITSM_API_KEY}
      - ITSM_USERNAME=${ITSM_USERNAME}
      - ITSM_PASSWORD=${ITSM_PASSWORD}
      
      # Monitoring Configuration
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - GRAFANA_URL=${GRAFANA_URL}
      
      # Python Configuration
      - PYTHONPATH=/app/src
      - PYTHONDONTWRITEBYTECODE=${PYTHON_DONT_WRITE_BYTECODE:-1}
      - PYTHONUNBUFFERED=${PYTHON_UNBUFFERED:-1}
    
    volumes:
      - ${DATA_VOLUME_TYPE:-fortinet-data}:${DATA_MOUNT_PATH:-/app/data}:${DATA_MOUNT_OPTIONS:-rw}
      - ${LOGS_VOLUME_TYPE:-fortinet-logs}:${LOGS_MOUNT_PATH:-/app/logs}:${LOGS_MOUNT_OPTIONS:-rw}
      - ${CONFIG_VOLUME_TYPE:-fortinet-config}:${CONFIG_MOUNT_PATH:-/app/config}:${CONFIG_MOUNT_OPTIONS:-rw}
      - ${CACHE_VOLUME_TYPE:-fortinet-cache}:${CACHE_MOUNT_PATH:-/app/cache}:${CACHE_MOUNT_OPTIONS:-rw}
      - ${STATIC_VOLUME_TYPE:-fortinet-static}:${STATIC_MOUNT_PATH:-/app/static}:${STATIC_MOUNT_OPTIONS:-ro}
      - ${UPLOADS_VOLUME_TYPE:-fortinet-uploads}:${UPLOADS_MOUNT_PATH:-/app/uploads}:${UPLOADS_MOUNT_OPTIONS:-rw}
      - ${TEMP_VOLUME_TYPE:-fortinet-temp}:${TEMP_MOUNT_PATH:-/app/temp}:${TEMP_MOUNT_OPTIONS:-rw}
    
    networks:
      - fortinet-network
    
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:${WEB_APP_PORT:-7777}/api/health', timeout=5).read()"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      start_period: ${HEALTH_CHECK_START_PERIOD:-60s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    
    security_opt:
      - no-new-privileges:true
    
    tmpfs:
      - /tmp:noexec,nosuid,size=${TMPFS_SIZE:-512m}
    
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-1G}
          cpus: ${CPU_LIMIT:-1.0}
        reservations:
          memory: ${MEMORY_RESERVATION:-512M}
          cpus: ${CPU_RESERVATION:-0.5}
    
    restart: unless-stopped
    
    labels:
      - "com.fortinet.nextrade.service=app"
      - "com.fortinet.nextrade.environment=${APP_MODE:-production}"
      - "com.fortinet.nextrade.version=${VERSION:-latest}"
      - "com.fortinet.nextrade.managed-by=docker-compose"
      - "com.centurylinklabs.watchtower.enable=${WATCHTOWER_ENABLE:-true}"
      - "com.centurylinklabs.watchtower.scope=${WATCHTOWER_SCOPE:-fortinet-scope}"
      - "traefik.enable=${TRAEFIK_ENABLE:-false}"
      - "traefik.http.routers.fortinet.rule=Host(`${TRAEFIK_HOST:-fortinet.local}`)"
      - "traefik.http.routers.fortinet.tls=${TRAEFIK_TLS:-false}"
      - "traefik.http.services.fortinet.loadbalancer.server.port=${WEB_APP_PORT:-7777}"
    
    profiles:
      - default
      - standalone
      - msa
      - secure
      - dev

  # MSA Microservices (MSA mode only)
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: ${AUTH_SERVICE_CONTAINER_NAME:-auth-service}
    environment:
      - PORT=${AUTH_SERVICE_PORT:-8081}
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://fortinet:${RABBITMQ_PASSWORD}@rabbitmq:5672}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTER_SERVICE_AUTH_KEY=${INTER_SERVICE_AUTH_KEY}
    ports:
      - "${AUTH_SERVICE_PORT:-8081}:${AUTH_SERVICE_PORT:-8081}"
    depends_on:
      - consul
      - redis
      - rabbitmq
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  fortimanager-service:
    build:
      context: ./services/fortimanager
      dockerfile: Dockerfile
    container_name: ${FORTIMANAGER_SERVICE_CONTAINER_NAME:-fortimanager-service}
    environment:
      - PORT=${FORTIMANAGER_SERVICE_PORT:-8082}
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://fortinet:${RABBITMQ_PASSWORD}@rabbitmq:5672}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTER_SERVICE_AUTH_KEY=${INTER_SERVICE_AUTH_KEY}
    ports:
      - "${FORTIMANAGER_SERVICE_PORT:-8082}:${FORTIMANAGER_SERVICE_PORT:-8082}"
    depends_on:
      - consul
      - redis
      - rabbitmq
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  itsm-service:
    build:
      context: ./services/itsm
      dockerfile: Dockerfile
    container_name: ${ITSM_SERVICE_CONTAINER_NAME:-itsm-service}
    environment:
      - PORT=${ITSM_SERVICE_PORT:-8083}
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://fortinet:${RABBITMQ_PASSWORD}@rabbitmq:5672}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTER_SERVICE_AUTH_KEY=${INTER_SERVICE_AUTH_KEY}
    ports:
      - "${ITSM_SERVICE_PORT:-8083}:${ITSM_SERVICE_PORT:-8083}"
    depends_on:
      - consul
      - redis
      - rabbitmq
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  monitoring-service:
    build:
      context: ./services/monitoring
      dockerfile: Dockerfile
    container_name: ${MONITORING_SERVICE_CONTAINER_NAME:-monitoring-service}
    environment:
      - PORT=${MONITORING_SERVICE_PORT:-8084}
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://fortinet:${RABBITMQ_PASSWORD}@rabbitmq:5672}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
    ports:
      - "${MONITORING_SERVICE_PORT:-8084}:${MONITORING_SERVICE_PORT:-8084}"
    depends_on:
      - consul
      - redis
      - rabbitmq
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  security-service:
    build:
      context: ./services/security
      dockerfile: Dockerfile
    container_name: ${SECURITY_SERVICE_CONTAINER_NAME:-security-service}
    environment:
      - PORT=${SECURITY_SERVICE_PORT:-8085}
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://fortinet:${RABBITMQ_PASSWORD}@rabbitmq:5672}
      - MONGODB_URL=${MONGODB_URL:-mongodb://security:${MONGODB_ROOT_PASSWORD}@mongodb:27017/security}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTER_SERVICE_AUTH_KEY=${INTER_SERVICE_AUTH_KEY}
    ports:
      - "${SECURITY_SERVICE_PORT:-8085}:${SECURITY_SERVICE_PORT:-8085}"
    depends_on:
      - consul
      - redis
      - rabbitmq
      - mongodb
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - secure

  analysis-service:
    build:
      context: ./services/analysis
      dockerfile: Dockerfile
    container_name: ${ANALYSIS_SERVICE_CONTAINER_NAME:-analysis-service}
    environment:
      - PORT=${ANALYSIS_SERVICE_PORT:-8086}
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://fortinet:${RABBITMQ_PASSWORD}@rabbitmq:5672}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTER_SERVICE_AUTH_KEY=${INTER_SERVICE_AUTH_KEY}
    ports:
      - "${ANALYSIS_SERVICE_PORT:-8086}:${ANALYSIS_SERVICE_PORT:-8086}"
    depends_on:
      - consul
      - redis
      - rabbitmq
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  config-service:
    build:
      context: ./services/config
      dockerfile: Dockerfile
    container_name: ${CONFIG_SERVICE_CONTAINER_NAME:-config-service}
    environment:
      - PORT=${CONFIG_SERVICE_PORT:-8087}
      - CONSUL_URL=${CONSUL_URL:-http://consul:8500}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://fortinet:${RABBITMQ_PASSWORD}@rabbitmq:5672}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTER_SERVICE_AUTH_KEY=${INTER_SERVICE_AUTH_KEY}
    ports:
      - "${CONFIG_SERVICE_PORT:-8087}:${CONFIG_SERVICE_PORT:-8087}"
    depends_on:
      - consul
      - redis
      - rabbitmq
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - msa
      - secure

  # Monitoring Stack (Secure mode only)
  influxdb:
    image: influxdb:${INFLUXDB_VERSION:-2.7}
    container_name: ${INFLUXDB_CONTAINER_NAME:-influxdb}
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME:-fortinet}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-fortinet}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-monitoring}
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - secure

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-10.1.0}
    container_name: ${GRAFANA_CONTAINER_NAME:-grafana}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_DISABLE_GRAVATAR: ${GRAFANA_DISABLE_GRAVATAR:-true}
      GF_ANALYTICS_REPORTING_ENABLED: ${GRAFANA_ANALYTICS_ENABLED:-false}
      GF_ANALYTICS_CHECK_FOR_UPDATES: ${GRAFANA_CHECK_UPDATES:-false}
      GF_SECURITY_COOKIE_SECURE: ${GRAFANA_COOKIE_SECURE:-true}
      GF_SECURITY_COOKIE_SAMESITE: ${GRAFANA_COOKIE_SAMESITE:-strict}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles:
      - secure

  # Prometheus (Dev mode only)
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: ${PROMETHEUS_CONTAINER_NAME:-prometheus}
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - fortinet-network
    restart: unless-stopped
    profiles:
      - dev

  # Watchtower Auto-updater (Optional)
  watchtower:
    image: containrrr/watchtower:${WATCHTOWER_VERSION:-latest}
    container_name: ${WATCHTOWER_CONTAINER_NAME:-fortinet-watchtower}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HOME}/.docker/config.json:/config.json:ro
    environment:
      - WATCHTOWER_POLL_INTERVAL=${WATCHTOWER_POLL_INTERVAL:-300}
      - WATCHTOWER_CLEANUP=${WATCHTOWER_CLEANUP:-true}
      - WATCHTOWER_INCLUDE_STOPPED=${WATCHTOWER_INCLUDE_STOPPED:-false}
      - WATCHTOWER_REVIVE_STOPPED=${WATCHTOWER_REVIVE_STOPPED:-false}
      - WATCHTOWER_ROLLING_RESTART=${WATCHTOWER_ROLLING_RESTART:-true}
      - WATCHTOWER_TIMEOUT=${WATCHTOWER_TIMEOUT:-60s}
      - WATCHTOWER_STOP_TIMEOUT=${WATCHTOWER_STOP_TIMEOUT:-10s}
      - WATCHTOWER_SCOPE=${WATCHTOWER_SCOPE:-fortinet-scope}
      - WATCHTOWER_NOTIFICATIONS_LEVEL=${WATCHTOWER_NOTIFICATIONS_LEVEL:-info}
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_API_TOKEN}
      - WATCHTOWER_HTTP_API_PERIODIC_POLLS=${WATCHTOWER_API_PERIODIC_POLLS:-true}
      - WATCHTOWER_HTTP_API_UPDATE_POLL_INTERVAL=${WATCHTOWER_API_UPDATE_INTERVAL:-30}
      - DOCKER_CONFIG=/config.json
      - DOCKER_HOST=unix:///var/run/docker.sock
      - REPO_USER=${REGISTRY_USERNAME}
      - REPO_PASS=${REGISTRY_PASSWORD}
    ports:
      - "${WATCHTOWER_API_PORT:-8080}:8080"
    networks:
      - fortinet-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    profiles:
      - watchtower

  # Version Verification Service (Verify mode only)
  version-check:
    image: alpine:${ALPINE_VERSION:-latest}
    container_name: ${VERSION_CHECK_CONTAINER_NAME:-fortinet-version-check}
    command: |
      sh -c "
        echo '==================================='
        echo 'FortiGate Version Verification'
        echo '==================================='
        echo 'Version: ${VERSION:-latest}'
        echo 'Date: $(date)'
        echo ''
        echo 'Checking service connectivity...'
        sleep 10
        
        if nc -zv ${REDIS_CONTAINER_NAME:-fortinet-redis} 6379 2>&1; then
          echo '✅ Redis: Connected'
        else
          echo '❌ Redis: Failed'
        fi
        
        if nc -zv ${CONTAINER_NAME:-fortinet} ${WEB_APP_PORT:-7777} 2>&1; then
          echo '✅ Main App: Connected'
        else
          echo '❌ Main App: Failed'
        fi
        
        echo ''
        echo 'Waiting for health checks...'
        sleep 30
        
        if wget -q -O- http://${CONTAINER_NAME:-fortinet}:${WEB_APP_PORT:-7777}/api/health 2>/dev/null | grep -q 'healthy'; then
          echo '✅ Application Health: OK'
          echo 'Version verification complete!'
        else
          echo '⚠️ Application Health: Check Required'
        fi
        
        echo '==================================='
      "
    depends_on:
      - fortinet
      - redis
    networks:
      - fortinet-network
    profiles:
      - verify

# Network Configuration
networks:
  fortinet-network:
    name: ${NETWORK_NAME:-fortinet-network}
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: ${BRIDGE_NAME:-fortinet-bridge}
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
    labels:
      - "project=fortinet"
      - "environment=${APP_MODE:-production}"

# Volume Configuration
volumes:
  # Application Volumes
  fortinet-data:
    name: ${DATA_VOLUME_NAME:-fortinet-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=data"
      - "com.fortinet.nextrade.description=Application data storage"
      - "com.fortinet.nextrade.backup=daily"

  fortinet-logs:
    name: ${LOGS_VOLUME_NAME:-fortinet-logs}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=logs"
      - "com.fortinet.nextrade.description=Application logs"
      - "com.fortinet.nextrade.retention=30days"

  fortinet-config:
    name: ${CONFIG_VOLUME_NAME:-fortinet-config}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=config"
      - "com.fortinet.nextrade.description=Configuration files"
      - "com.fortinet.nextrade.backup=daily"

  fortinet-cache:
    name: ${CACHE_VOLUME_NAME:-fortinet-cache}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=cache"
      - "com.fortinet.nextrade.description=Application cache"
      - "com.fortinet.nextrade.cleanup=monthly"

  fortinet-static:
    name: ${STATIC_VOLUME_NAME:-fortinet-static}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=static"
      - "com.fortinet.nextrade.description=Static assets"
      - "com.fortinet.nextrade.readonly=true"

  fortinet-uploads:
    name: ${UPLOADS_VOLUME_NAME:-fortinet-uploads}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=uploads"
      - "com.fortinet.nextrade.description=User uploaded files"
      - "com.fortinet.nextrade.backup=daily"

  fortinet-temp:
    name: ${TEMP_VOLUME_NAME:-fortinet-temp}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=temp"
      - "com.fortinet.nextrade.description=Temporary files"
      - "com.fortinet.nextrade.cleanup=weekly"

  # Infrastructure Volumes
  redis-data:
    name: ${REDIS_DATA_VOLUME_NAME:-fortinet-redis-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=redis-data"
      - "com.fortinet.nextrade.description=Redis cache data"
      - "com.fortinet.nextrade.backup=weekly"

  kong-db-data:
    name: ${KONG_DB_DATA_VOLUME_NAME:-kong-db-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=kong-db-data"
      - "com.fortinet.nextrade.description=Kong database data"
      - "com.fortinet.nextrade.backup=daily"

  consul-data:
    name: ${CONSUL_DATA_VOLUME_NAME:-consul-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=consul-data"
      - "com.fortinet.nextrade.description=Consul service discovery data"
      - "com.fortinet.nextrade.backup=daily"

  rabbitmq-data:
    name: ${RABBITMQ_DATA_VOLUME_NAME:-rabbitmq-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=rabbitmq-data"
      - "com.fortinet.nextrade.description=RabbitMQ message queue data"
      - "com.fortinet.nextrade.backup=weekly"

  mongodb-data:
    name: ${MONGODB_DATA_VOLUME_NAME:-mongodb-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=mongodb-data"
      - "com.fortinet.nextrade.description=MongoDB document database data"
      - "com.fortinet.nextrade.backup=daily"

  # Monitoring Volumes
  influxdb-data:
    name: ${INFLUXDB_DATA_VOLUME_NAME:-influxdb-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=influxdb-data"
      - "com.fortinet.nextrade.description=InfluxDB time series data"
      - "com.fortinet.nextrade.backup=weekly"

  grafana-data:
    name: ${GRAFANA_DATA_VOLUME_NAME:-grafana-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=grafana-data"
      - "com.fortinet.nextrade.description=Grafana dashboard data"
      - "com.fortinet.nextrade.backup=weekly"

  prometheus-data:
    name: ${PROMETHEUS_DATA_VOLUME_NAME:-prometheus-data}
    driver: ${VOLUME_DRIVER:-local}
    labels:
      - "com.fortinet.nextrade.volume=prometheus-data"
      - "com.fortinet.nextrade.description=Prometheus metrics data"
      - "com.fortinet.nextrade.backup=weekly"