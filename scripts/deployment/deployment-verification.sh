#!/bin/bash

# FortiGate Nextrade v1.0.9-fix-redis Deployment Verification Script
# Generated: 2025-08-21T21:55:00Z

echo "üöÄ FortiGate Nextrade v1.0.9-fix-redis Deployment Verification"
echo "=============================================================="

# Function to check service health
check_health() {
    echo "üîç Checking application health..."
    if curl -f --max-time 10 http://192.168.50.110:30777/api/health; then
        echo "‚úÖ Application is healthy and responding"
        return 0
    else
        echo "‚ö†Ô∏è  Application health check failed - may be starting up"
        return 1
    fi
}

# Function to check Docker image availability
check_image() {
    echo "üê≥ Checking Docker image availability..."
    if docker pull registry.jclee.me/fortinet:v1.0.9-fix-redis; then
        echo "‚úÖ Docker image v1.0.9-fix-redis is available in registry"
        return 0
    else
        echo "‚ùå Docker image not found in registry"
        return 1
    fi
}

# Function to check Kubernetes cluster
check_k8s() {
    echo "‚ò∏Ô∏è  Checking Kubernetes cluster connectivity..."
    if kubectl cluster-info >/dev/null 2>&1; then
        echo "‚úÖ Kubernetes cluster is accessible"
        kubectl get pods -n fortinet 2>/dev/null || echo "‚ö†Ô∏è  No pods found in fortinet namespace"
        return 0
    else
        echo "‚ö†Ô∏è  Kubernetes cluster is temporarily unavailable"
        return 1
    fi
}

# Function to check ArgoCD status
check_argocd() {
    echo "üîÑ Checking ArgoCD deployment status..."
    if argocd app get fortinet >/dev/null 2>&1; then
        echo "‚úÖ ArgoCD application status:"
        argocd app get fortinet
        return 0
    else
        echo "‚ö†Ô∏è  ArgoCD is temporarily unavailable"
        return 1
    fi
}

# Main verification process
echo "üìã Starting deployment verification..."
echo

# Track results
RESULTS=()

# Check Docker image
if check_image; then
    RESULTS+=("‚úÖ Docker image: READY")
else
    RESULTS+=("‚ùå Docker image: FAILED")
fi

echo

# Check Kubernetes
if check_k8s; then
    RESULTS+=("‚úÖ Kubernetes: ACCESSIBLE")
else
    RESULTS+=("‚ö†Ô∏è  Kubernetes: UNAVAILABLE")
fi

echo

# Check ArgoCD
if check_argocd; then
    RESULTS+=("‚úÖ ArgoCD: SYNCED")
else
    RESULTS+=("‚ö†Ô∏è  ArgoCD: UNAVAILABLE")
fi

echo

# Check application health
if check_health; then
    RESULTS+=("‚úÖ Health: HEALTHY")
else
    RESULTS+=("‚ö†Ô∏è  Health: UNAVAILABLE")
fi

echo
echo "üìä VERIFICATION SUMMARY"
echo "======================"
for result in "${RESULTS[@]}"; do
    echo "$result"
done

echo
echo "üîß DEPLOYMENT INFORMATION"
echo "========================="
echo "Image: registry.jclee.me/fortinet:v1.0.9-fix-redis"
echo "Chart: fortinet-1.0.9.tgz"
echo "Endpoint: http://192.168.50.110:30777/api/health"
echo "Domain: http://fortinet.jclee.me (requires /etc/hosts entry)"
echo "Namespace: fortinet"
echo "Git SHA: 1667783"
echo "Build: 2025-08-21T21:51:26Z"

echo
echo "üìù MANUAL DEPLOYMENT COMMANDS (if ArgoCD unavailable)"
echo "===================================================="
echo "# Install/upgrade with Helm:"
echo "helm upgrade --install fortinet ./charts/fortinet-1.0.9.tgz -n fortinet --create-namespace"
echo
echo "# Check deployment status:"
echo "kubectl get pods -n fortinet"
echo "kubectl logs -l app=fortinet -n fortinet -f"
echo
echo "# Port forward for local testing:"
echo "kubectl port-forward svc/fortinet 8080:80 -n fortinet"

echo
echo "üéØ FIXES INCLUDED IN v1.0.9-fix-redis"
echo "====================================="
echo "‚úÖ Redis port configuration fix (6379 instead of 6380)"
echo "‚úÖ Pytest assertions fix (converted from dict returns to assert statements)"
echo "‚úÖ Updated GitOps metadata and immutable tags"
echo "‚úÖ Multi-stage Docker build optimization"
echo "‚úÖ Security hardening with non-root user"

echo
echo "üîÑ GitOps STATUS"
echo "================"
echo "‚úÖ Commits pushed to GitHub (triggers automated pipeline)"
echo "‚úÖ Docker image built and pushed to registry"
echo "‚úÖ Helm chart updated with new version"
echo "‚è≥ Waiting for infrastructure availability for ArgoCD sync"

echo
echo "Verification completed at $(date)"