version: '3.8'

services:
  # Metric Labeling Agent
  metric-labeling-agent:
    build:
      context: .
      dockerfile: Dockerfile.agents
    image: grafana-agents:latest
    container_name: metric-labeling-agent
    restart: unless-stopped
    command: ["python", "-u", "metric-labeling-engine.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - PROMETHEUS_URL=http://prometheus:9090
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - GRAFANA_URL=http://grafana:3000
    volumes:
      - ./logs/labeling:/var/log/agent
      - ./config/agents:/app/config:ro
    networks:
      - monitoring
    depends_on:
      prometheus:
        condition: service_started
      elasticsearch:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://prometheus:9090/api/v1/query?query=up')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Intelligent Alert Manager Agent
  alert-manager-agent:
    build:
      context: .
      dockerfile: Dockerfile.agents
    image: grafana-agents:latest
    container_name: alert-manager-agent
    restart: unless-stopped
    command: ["python", "-u", "intelligent-alert-manager.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - ALERTMANAGER_URL=http://alertmanager:9093
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - GRAFANA_URL=http://grafana:3000
    volumes:
      - ./logs/alerts:/var/log/agent
      - ./config/agents:/app/config:ro
    networks:
      - monitoring
    depends_on:
      alertmanager:
        condition: service_started
      elasticsearch:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://alertmanager:9093/api/v2/status')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Log Scanner Agent
  log-scanner-agent:
    build:
      context: .
      dockerfile: Dockerfile.agents
    image: grafana-agents:latest
    container_name: log-scanner-agent
    restart: unless-stopped
    command: ["python", "-u", "log-scanner-agent.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - INFLUXDB_URL=http://influxdb:8086
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
    volumes:
      - ./logs:/var/log/containers:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./config/agents:/app/config:ro
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_started
      influxdb:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import os; os.path.exists('/var/log/containers')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Predictive Analytics Agent
  predictive-analytics-agent:
    build:
      context: .
      dockerfile: Dockerfile.agents
    image: grafana-agents:latest
    container_name: predictive-analytics-agent
    restart: unless-stopped
    command: ["python", "-u", "predictive-analytics.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=super-secret-auth-token
      - INFLUXDB_ORG=monitoring
      - INFLUXDB_BUCKET=metrics
      - GRAFANA_URL=http://grafana:3000
    volumes:
      - ./logs/predictions:/var/log/agent
      - ./config/agents:/app/config:ro
    networks:
      - monitoring
    depends_on:
      influxdb:
        condition: service_started
      grafana:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://influxdb:8086/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Agent Supervisor (monitors all agents)
  agent-supervisor:
    image: python:3.9-slim
    container_name: agent-supervisor
    restart: unless-stopped
    command: |
      sh -c "pip install aiohttp prometheus-client &&
             while true; do
               echo 'Checking agent health...';
               sleep 60;
             done"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs/supervisor:/var/log/supervisor
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

networks:
  monitoring:
    external: true
    name: tmux_monitoring

volumes:
  agent-data:
    driver: local