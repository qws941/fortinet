[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fortigate-nextrade"
version = "1.3.0"
description = "FortiGate Nextrade - Network monitoring and analysis platform"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "JCLee", email = "admin@jclee.me"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Topic :: System :: Networking :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "Flask==3.0.0",
    "Flask-CORS==4.0.1",
    "Flask-SocketIO==5.3.6",
    "Flask-WTF==1.2.1",
    "Jinja2==3.1.4",
    "Werkzeug==3.0.1",
    "requests==2.32.3",
    "redis==5.0.8",
    "PyYAML==6.0.2",
    "psutil==5.9.8",
    "cryptography==42.0.8",
    "gunicorn==21.2.0",
    "python-dotenv==1.0.1",
    "beautifulsoup4==4.12.3",
    "lxml==4.9.3"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "black>=24.10.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "mypy>=1.11.2",
    "coverage>=7.6.4"
]
test = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0"
]

[project.scripts]
fortinet = "src.main:main"

[project.urls]
"Homepage" = "https://github.com/qws941/fortinet"
"Bug Reports" = "https://github.com/qws941/fortinet/issues"
"Source" = "https://github.com/qws941/fortinet"
"Documentation" = "https://fortinet.jclee.me/docs"

# Tool configurations
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.html", "*.css", "*.js"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers --cov-fail-under=5 --disable-warnings --timeout=30"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "functional: marks tests as functional tests",
    "fortimanager: marks tests related to FortiManager",
    "monitoring: marks tests related to monitoring",
    "msa: marks tests related to microservices architecture"
]
minversion = "6.0"
timeout = 30
filterwarnings = [
    "ignore::DeprecationWarning", 
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestConfigWarning",
    "ignore::pytest.PytestReturnNotNoneWarning"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/static/*",
    "src/templates/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
    | build
    | dist
    | htmlcov
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.flake8]
max-line-length = 120
ignore = ["E203", "W503", "E501"]
exclude = [".git", "__pycache__", "build", "dist", ".venv", "htmlcov"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
